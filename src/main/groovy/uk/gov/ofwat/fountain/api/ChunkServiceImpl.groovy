package uk.gov.ofwat.fountain.apiimport org.slf4j.Logger;import org.slf4j.LoggerFactory;import uk.gov.ofwat.fountain.audit.AuditExclusionStrategyimport uk.gov.ofwat.fountain.domain.chunk.Chunkimport uk.gov.ofwat.fountain.domain.chunk.ChunkSet;import uk.gov.ofwat.fountain.domain.chunk.Chunkableimport uk.gov.ofwat.fountain.domain.chunk.ReportChunkSet;import uk.gov.ofwat.fountain.rest.dto.DataDto;import uk.gov.ofwat.fountain.search.jsonEntityFactories.AbstractJsonEntityFactory;import uk.gov.ofwat.fountain.search.jsonEntityFactories.JsonProducerimport com.google.gson.Gson;import com.google.gson.GsonBuilderimport groovyx.net.http.HTTPBuilderimport static groovyx.net.http.Method.POSTimport static groovyx.net.http.Method.GETimport static groovyx.net.http.ContentType.JSON

class ChunkServiceImpl implements ChunkService {		AbstractJsonEntityFactory abstractJsonEntityFactory	Gson gson	String chunkBaseUrl	Integer chunkPort	private static Logger logger = LoggerFactory.getLogger(ChunkServiceImpl.class)		public ChunkServiceImpl(){		gson = new GsonBuilder().setExclusionStrategies(new AuditExclusionStrategy()).create()	}			ChunkSet doChunking(Chunkable chunkable){				ChunkSet chunkSet = new ChunkSet();				//Get the array of data and convert into JSON //Similar to the searchService!		JsonProducer factory = abstractJsonEntityFactory.getJsonEntityFactory(ReportChunkSet.class)		//This should return a JSON string representing the content to post to the Chunk REST interface.		def jsonString = factory.getJson(chunkable, this.gson)				//Create and add the appropriate headers and POST to the REST interface.		String endpoint = "${chunkBaseUrl}:${chunkPort}" //TODO look up from properties 		def http = new HTTPBuilder(endpoint)				http.post( path: '/chunks', body: jsonString,		    requestContentType: JSON) { resp, json ->         		    println "POST Success: ${resp.statusLine}"		    //println json			chunkSet.chunkCount = json.chunks.size()			chunkSet.chunkSetId = json.id			json.chunks.each {				Chunk chunk = new Chunk()				chunk.id = it.id				chunk.fileRef = it.fileRef				chunkSet.chunks.add(it)			}		    assert resp.statusLine.statusCode == 201		}				return chunkSet	}	
    List<DataDto> getChunk(chunkSetId, chunkId){		String endpoint = "${chunkBaseUrl}:${chunkPort}"		          		def http = new HTTPBuilder(endpoint)				http.get( path: "/chunks/${chunkSetId}/${chunkId}.json", requestContentType: JSON) { resp, json ->         		    println "GET Success: ${resp.statusLine}"		    println json		    //assert resp.statusLine.statusCode == 201			List chunk = json;			return chunk;		}	}		/**	 * 	 */	Boolean checkIfChunked(){		return false;	}
}
